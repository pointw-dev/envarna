import{_ as i,c as s,o as a,al as e}from"./chunks/framework.DYoXd6M_.js";const k=JSON.parse('{"title":"Module Format Compatibility","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://pointw-dev.github.io/envarna/how-to/module-compatibility.html"}]]},"headers":[],"relativePath":"how-to/module-compatibility.md","filePath":"how-to/module-compatibility.md"}'),o={name:"how-to/module-compatibility.md"};function n(p,t,l,r,d,h){return a(),s("div",null,t[0]||(t[0]=[e(`<h1 id="module-format-compatibility" tabindex="-1">Module Format Compatibility <a class="header-anchor" href="#module-format-compatibility" aria-label="Permalink to &quot;Module Format Compatibility&quot;">​</a></h1><p><strong>Envarna is packaged with full support for both modern ESM and legacy CommonJS environments.</strong> This means you can use it in any modern JavaScript or TypeScript project with no additional configuration.</p><h2 id="supported-environments" tabindex="-1">Supported Environments <a class="header-anchor" href="#supported-environments" aria-label="Permalink to &quot;Supported Environments&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Environment</th><th>Example</th><th>Supported</th></tr></thead><tbody><tr><td>TypeScript (ESM)</td><td><code>import { setting } from &#39;envarna&#39;</code></td><td>✅ Yes</td></tr><tr><td>TypeScript (CJS)</td><td><code>const { setting } = require(&#39;envarna&#39;)</code></td><td>✅ Yes</td></tr><tr><td>Node.js ESM</td><td><code>import { setting } from &#39;envarna&#39;</code></td><td>✅ Yes</td></tr><tr><td>Node.js CommonJS</td><td><code>const { setting } = require(&#39;envarna&#39;)</code></td><td>✅ Yes</td></tr><tr><td><code>npx envarna</code> CLI</td><td><code>npx envarna list</code></td><td>✅ Yes</td></tr></tbody></table><blockquote><p><strong>Minimum Node.js version:</strong> <code>&gt;= 18</code></p></blockquote><h2 id="packaging-details" tabindex="-1">Packaging Details <a class="header-anchor" href="#packaging-details" aria-label="Permalink to &quot;Packaging Details&quot;">​</a></h2><p>Envarna uses a <a href="https://nodejs.org/api/packages.html#dual-commonjses-module-packages" target="_blank" rel="noreferrer">dual-module strategy</a> to support both ecosystems cleanly:</p><ul><li>The code is built to two targets: <ul><li><code>dist/esm/</code> → ESM (<code>import/export</code>)</li><li><code>dist/cjs/</code> → CommonJS (<code>require/module.exports</code>)</li></ul></li><li>The <code>package.json</code> uses the <a href="https://nodejs.org/api/packages.html#exports" target="_blank" rel="noreferrer"><code>exports</code> field</a> to route tools automatically:<div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;types&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist/esm/index.d.ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;import&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist/esm/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;require&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist/cjs/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;types&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./dist/esm/index.d.ts&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p>This means you can import Envarna naturally, and your toolchain (Node, TypeScript, Webpack, etc.) will resolve the correct version.</p><h2 id="typescript-support" tabindex="-1">TypeScript Support <a class="header-anchor" href="#typescript-support" aria-label="Permalink to &quot;TypeScript Support&quot;">​</a></h2><p>TypeScript will automatically pick up the appropriate <code>.d.ts</code> types from the ESM build:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { BaseSettings, setting } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;envarna&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>No additional type configuration is required.</p>`,13)]))}const u=i(o,[["render",n]]);export{k as __pageData,u as default};
