import{_ as s,C as t,c as o,o as l,j as e,G as r,al as p,a as i}from"./chunks/framework.DYoXd6M_.js";const y=JSON.parse('{"title":"Command line","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://pointw-dev.github.io/envarna/how-to/command-line.html"}]]},"headers":[],"relativePath":"how-to/command-line.md","filePath":"how-to/command-line.md"}'),c={name:"how-to/command-line.md"};function d(h,a,m,u,v,b){const n=t("centered-image");return l(),o("div",null,[a[0]||(a[0]=e("h1",{id:"command-line",tabindex:"-1"},[i("Command line "),e("a",{class:"header-anchor",href:"#command-line","aria-label":'Permalink to "Command line"'},"​")],-1)),r(n,{src:"/img/work-in-progress.png"}),a[1]||(a[1]=p(`<p>Envarna can output your settings definitions in a number of formats. Call <code>envarna</code> from the command line (usually with <code>npx</code>)</p><h2 id="help" tabindex="-1">--help <a class="header-anchor" href="#help" aria-label="Permalink to &quot;--help&quot;">​</a></h2><p>Here is the output of <code>npx envarna --help</code></p><div class="language-plaintext vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">plaintext</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>envarna &lt;command&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Commands:</span></span>
<span class="line"><span>  envarna list         Display settings details</span></span>
<span class="line"><span>  envarna env          Write &quot;.env.template&quot;</span></span>
<span class="line"><span>  envarna md           Write &quot;SETTINGS.md&quot;</span></span>
<span class="line"><span>  envarna values       Write &quot;values.yaml&quot;</span></span>
<span class="line"><span>  envarna compose      Display docker-compose style environment yaml</span></span>
<span class="line"><span>  envarna k8s          Display kubernetes style env var structure</span></span>
<span class="line"><span>  envarna json [root]  Display JSON settings structure</span></span>
<span class="line"><span>  envarna yaml [root]  Display YAML settings structure</span></span>
<span class="line"><span>  envarna raw          Display the raw structure extracted from the settings cla</span></span>
<span class="line"><span>                       sses used to power the other formats</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Options:</span></span>
<span class="line"><span>  --version  Show version number                                       [boolean]</span></span>
<span class="line"><span>  --help     Show help                                                 [boolean]</span></span></code></pre></div><h2 id="list" tabindex="-1">list <a class="header-anchor" href="#list" aria-label="Permalink to &quot;list&quot;">​</a></h2><p>Display settings details</p><h2 id="env" tabindex="-1">env <a class="header-anchor" href="#env" aria-label="Permalink to &quot;env&quot;">​</a></h2><p>Write <code>.env.template</code></p><h2 id="md" tabindex="-1">md <a class="header-anchor" href="#md" aria-label="Permalink to &quot;md&quot;">​</a></h2><p>Write <code>SETTINGS.md</code></p><h2 id="values" tabindex="-1">values <a class="header-anchor" href="#values" aria-label="Permalink to &quot;values&quot;">​</a></h2><p>Write <code>values.yaml</code></p><h2 id="compose" tabindex="-1">compose <a class="header-anchor" href="#compose" aria-label="Permalink to &quot;compose&quot;">​</a></h2><p>Display docker-compose style environment yaml</p><h2 id="k8s" tabindex="-1">k8s <a class="header-anchor" href="#k8s" aria-label="Permalink to &quot;k8s&quot;">​</a></h2><p>Display kubernetes style env var structure</p><h2 id="json" tabindex="-1">json <a class="header-anchor" href="#json" aria-label="Permalink to &quot;json&quot;">​</a></h2><p>Display JSON settings structure [root] --flat --code</p><h2 id="yaml" tabindex="-1">yaml <a class="header-anchor" href="#yaml" aria-label="Permalink to &quot;yaml&quot;">​</a></h2><p>Display YAML settings structure [root] --flat --code</p><h2 id="raw" tabindex="-1">raw <a class="header-anchor" href="#raw" aria-label="Permalink to &quot;raw&quot;">​</a></h2><p>Raw output of the structure used to create the above</p>`,22))])}const k=s(c,[["render",d]]);export{y as __pageData,k as default};
