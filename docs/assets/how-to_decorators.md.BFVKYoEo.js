import{_ as a,C as t,c as n,o as l,j as s,G as o,al as r,a as h}from"./chunks/framework.DYoXd6M_.js";const v=JSON.parse('{"title":"Decorators","description":"","frontmatter":{"head":[["link",{"rel":"canonical","href":"https://pointw-dev.github.io/envarna/how-to/decorators.html"}]]},"headers":[],"relativePath":"how-to/decorators.md","filePath":"how-to/decorators.md"}'),d={name:"how-to/decorators.md"};function p(c,i,k,u,g,E){const e=t("centered-image");return l(),n("div",null,[i[0]||(i[0]=s("h1",{id:"decorators",tabindex:"-1"},[h("Decorators "),s("a",{class:"header-anchor",href:"#decorators","aria-label":'Permalink to "Decorators"'},"​")],-1)),o(e,{src:"/img/work-in-progress.png"}),i[1]||(i[1]=r('<h2 id="v" tabindex="-1"><code>v</code> <a class="header-anchor" href="#v" aria-label="Permalink to &quot;`v`&quot;">​</a></h2><ul><li><code>v</code> is used with <code>@settings()</code> to create more complex validation chains</li><li><code>v</code> is for &quot;validation&quot;. It is a light extension of <code>z</code> from Zod designed for use in a settings environment.</li><li>automatic coercion (e.g. <code>v.number()</code> accepts strings like &quot;42&quot;)</li><li>access to Zod validations e.g.:<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;aaa&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mmm&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div></li><li>handling for arrays (and soon objects)</li></ul><blockquote><p>You can still use raw Zod if needed, just remember to be aware of coercion:</p></blockquote><p>See the sections (string formats, numbers, etc.) under <a href="https://zod.dev/api?id=strings" target="_blank" rel="noreferrer">Zod&#39;s Defining schemas</a> for more details on building validation chains for each type.</p><h2 id="secret" tabindex="-1">@secret <a class="header-anchor" href="#secret" aria-label="Permalink to &quot;@secret&quot;">​</a></h2><ul><li>marks a field as a secret</li><li>adds this note to generated formats (e.g. <code>npx envarna list</code>)</li><li>prevents typical log dumps from revealing the secret value (replaced with <code>***</code>)</li></ul><h2 id="alias" tabindex="-1">@alias <a class="header-anchor" href="#alias" aria-label="Permalink to &quot;@alias&quot;">​</a></h2><ul><li>allows you to set an environment variable name to be used to populate this field</li></ul><h2 id="pushtoenv" tabindex="-1">@pushToEnv <a class="header-anchor" href="#pushtoenv" aria-label="Permalink to &quot;@pushToEnv&quot;">​</a></h2><ul><li>if the matching environment variable for this field is missing, the default supplied to this field is exported to that envar.</li><li>this is handy for setting up a dev version that pushes environment variable values for use by external services that require them</li><li>handy when needed, but use with caution!</li></ul><h2 id="devonly" tabindex="-1">@devOnly <a class="header-anchor" href="#devonly" aria-label="Permalink to &quot;@devOnly&quot;">​</a></h2><ul><li>marks a field as intended only for development use</li><li>add this note to generated formats (e.g. <code>npx envarna list</code>)</li><li>does not alter any functionality - documentation/scripting purposes only</li></ul>',12))])}const y=a(d,[["render",p]]);export{v as __pageData,y as default};
